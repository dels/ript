#
# The firewall script does not consider things like bytes per connection, 
# esp and all this stuff. Thus this configuration does not either.
# We considered some limitations like packets per second with a non-configurable 
# burst limit of 10 and some "per interface" options.
# 

# executables for iptables and ip6tables
iptables_bin: "/sbin/iptables"
iptables-save_bin: "/sbin/iptables-save"
ip6tables_bin: "/sbin/ip6tables"
ip6tables-save_bin: "/sbin/ip6tables-save"

# if set to yes the ruby script automatically executes all rules and saves 
# iptables and ip6tables to defined files
# see http://www.debian-administration.org/articles/445 how to use these 
# options
auto_commit_and_save_rules: no
iptables_save_to: "/etc/iptables.rules"
ip6tables_save_to: "/etc/ip6tables.rules"

# packets per protocol and client ip
max_tcp_in_per_second: 10000
max_tcp_out_per_second: 10000
max_udp_in_per_second: 10000
max_udp_out_per_second: 10000
max_icmp_in_per_second: 10000
max_icmp_out_per_second: 10000
allow_localhost_communication: yes

# hopefully decent enough logging options
log_icmp_in: no
log_icmp_out: no
log_syn_in: no
log_syn_out: no
log_established: no
log_drop: yes
log_rejected: no
log_invalid: no

# if no rule matches, per default, we just drop a 
# packet to slow down port scanners. if you put here
# reject you may also want to define the reject method
# this can be done with the paramter reject_with
deny_with: "drop"
# this option should be implemented a bit more precicly, we know, but
# we defined this as fitting our needs
reject_with: "port-unreachable"

# some options for each device and for ipv4 and ipv6 
ipv4:
  # finetuned example
  eth0: &template
    log_syn_in: yes
    log_syn_out: yes
    log_drop: yes
    log_reject: yes
    log_established: no
    log_invalid: yes
    # see /etc/protocols
    allowed_protocols: "47 142"
    # space seperated list of ip addresses
    # ip: ""
    service_ports_tcp_in: ""
    service_ports_tcp_out: "20 21 22 43 47 53 80 123 443 587 873 1194 1723 3000 4960 5190 5896 6667 8001 9658"
    service_ports_udp_in: ""
    service_ports_udp_out: "20 21 22 47 53 67 80 123 443 1194"
    # http://www.iana.org/assignments/icmp-parameters
    allowed_icmp_types_in: "0 8 3 4 12"
    allowed_icmp_types_out: "0 8 3 4 12"
    # i want root to allow everything (e.g. to scan networks)
    additional_output_rules: |
      -m owner --uid 0 -j ACCEPT
    #additional_input_rules: |
      
    #additional_forward_rules: |

  # with &<variable name> we can define an anchor. the next two lines apply all options set for
  # eth0 to wlan0 and ppp0
  # see the &template after eth0: above         
  wlan0: *template
  ppp0: *template
  # nearly not tuned example
  eth1:
    service_ports_tcp_out: "20 21 22 43 47 53 80 123 443 587 873 1194 1723 3000 4960 5190 5896 6667 8001 9658"
    service_ports_udp_out: "20 21 22 47 53 67 80 123 443 1194"
    # http://www.iana.org/assignments/icmp-parameters
    allowed_icmp_types_in: "0 8 3 4 12"
    allowed_icmp_types_out: "0 8 3 4 12"

# the only difference which is important are the numbers of icmp types which are quite different to ipv4. 
# of course the ip address is also different.
ipv6:
  eth0:

    log_syn_in: yes

    service_ports_tcp_in: "80 443"
    service_ports_tcp_out: "20 21 22 43 47 53 80 123 443 587 1194 3000 4960 5190 5896 6667 8001 9658"
    # we ommit the udp ports in variable since we dont want any udp services to be reachable from outside
    service_ports_udp_out: "20 21 22 47 53 67 80 123 443 1194"
    # http://www.iana.org/assignments/icmpv6-parameters
    allowed_icmp_types_in: "1 2 3 4 128 129 133 134 135 138 139 140 141 142 148 149 151 152 153"
    allowed_icmp_types_out: "1 2 3 4 128 129 133 134 135 138 139 140 141 142 148 149 151 152 153"

